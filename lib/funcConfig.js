import fs from 'fs';
import path from 'path';

const configPath = './database/configuracion.json';
const configDir = './database';

// Funci√≥n para asegurar que el directorio y archivo existen
function ensureConfigExists() {
  try {
    // Crear directorio si no existe
    if (!fs.existsSync(configDir)) {
      fs.mkdirSync(configDir, { recursive: true });
      console.log('üìÅ Directorio database creado autom√°ticamente.');
    }
    
    // Crear archivo si no existe
    if (!fs.existsSync(configPath)) {
      const defaultConfig = {}; // Configuraci√≥n vac√≠a por defecto
      fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2));
      console.log('üìÑ Archivo configuracion.json creado autom√°ticamente.');
    }
  } catch (error) {
    console.error('‚ùå Error al crear la estructura de configuraci√≥n:', error.message);
    throw error;
  }
}

export function getConfig(chatId) {
  try {
    // Asegurar que existe la estructura
    ensureConfigExists();
    
    if (!fs.existsSync(configPath)) return {};
    
    const data = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    return data[chatId] || {};
  } catch (error) {
    console.error('‚ùå Error al leer configuraci√≥n:', error.message);
    return {};
  }
}

export function setConfig(chatId, newConfig) {
  try {
    // Asegurar que existe la estructura
    ensureConfigExists();
    
    let data = {};
    
    if (fs.existsSync(configPath)) {
      try {
        const fileContent = fs.readFileSync(configPath, 'utf8');
        data = JSON.parse(fileContent);
      } catch (parseError) {
        console.warn('‚ö†Ô∏è Archivo de configuraci√≥n corrupto, creando uno nuevo...');
        data = {};
      }
    }
    
    data[chatId] = newConfig;
    fs.writeFileSync(configPath, JSON.stringify(data, null, 2));
    console.log(`‚úÖ Configuraci√≥n guardada para chat: ${chatId}`);
  } catch (error) {
    console.error('‚ùå Error al guardar configuraci√≥n:', error.message);
    throw error;
  }
}

export function restaurarConfiguraciones() {
  try {
    // Asegurar que existe la estructura
    ensureConfigExists();
    
    const defaultConfig = {}; // Cambia esto si quieres valores por defecto
    fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2));
    console.log('‚öôÔ∏è Configuraciones restauradas a valores por defecto.');
  } catch (error) {
    console.error('‚ùå Error al restaurar configuraciones:', error.message);
    throw error;
  }
}

// Funci√≥n adicional para verificar el estado de la configuraci√≥n
export function checkConfigStatus() {
  const dirExists = fs.existsSync(configDir);
  const fileExists = fs.existsSync(configPath);
  
  console.log(`üìÅ Directorio database: ${dirExists ? '‚úÖ Existe' : '‚ùå No existe'}`);
  console.log(`üìÑ Archivo configuracion.json: ${fileExists ? '‚úÖ Existe' : '‚ùå No existe'}`);
  
  if (fileExists) {
    try {
      const stats = fs.statSync(configPath);
      console.log(`üìä Tama√±o del archivo: ${stats.size} bytes`);
      console.log(`üïí √öltima modificaci√≥n: ${stats.mtime}`);
    } catch (error) {
      console.error('‚ùå Error al obtener informaci√≥n del archivo:', error.message);
    }
  }
  
  return { dirExists, fileExists };
}

// Funci√≥n para hacer backup de la configuraci√≥n
export function backupConfig() {
  try {
    if (!fs.existsSync(configPath)) {
      console.warn('‚ö†Ô∏è No hay archivo de configuraci√≥n para respaldar.');
      return false;
    }
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupPath = `./database/configuracion_backup_${timestamp}.json`;
    
    fs.copyFileSync(configPath, backupPath);
    console.log(`üíæ Backup creado: ${backupPath}`);
    return true;
  } catch (error) {
    console.error('‚ùå Error al crear backup:', error.message);
    return false;
  }
}
