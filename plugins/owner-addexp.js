import fs from 'fs'
import { getUserStats, addExp, getExp } from '../lib/stats.js'

const handler = async (m, { conn, text }) => {
  try {
    // Verificar si global y sus propiedades existen
    const datas = global || {}
    const dbData = datas.db?.data?.users?.[m.sender] || {}
    const idioma = dbData.language || global.defaultLenguaje || 'es'
    
    // Cargar las traducciones de forma segura
    let tradutor = {}
    try {
      const languageFile = `./src/languages/${idioma}.json`
      if (fs.existsSync(languageFile)) {
        const _translate = JSON.parse(fs.readFileSync(languageFile))
        tradutor = _translate.plugins?.owner_anadirexp || {}
      }
    } catch (error) {
      console.log('Error al cargar traducciones:', error)
    }

    // Textos por defecto en caso de que no existan las traducciones
    const defaultTexts = {
      texto1: "‚ùå Menciona a alguien o usa el comando en privado",
      texto2: "‚ùå Ingresa la cantidad de EXP a a√±adir",
      texto3: "‚ùå Solo se permiten n√∫meros",
      texto4: "‚ùå La cantidad debe ser mayor a 0",
      texto5: [
        "‚úÖ Experiencia a√±adida exitosamente",
        "‚≠ê Experiencia a√±adida:"
      ]
    }

    // Usar textos por defecto si no existen las traducciones
    const texts = {
      texto1: tradutor.texto1 || defaultTexts.texto1,
      texto2: tradutor.texto2 || defaultTexts.texto2,
      texto3: tradutor.texto3 || defaultTexts.texto3,
      texto4: tradutor.texto4 || defaultTexts.texto4,
      texto5: tradutor.texto5 || defaultTexts.texto5
    }

    // Determinar el usuario objetivo
    let who;
    if (m.isGroup) {
      who = m.mentionedJid && m.mentionedJid[0] ? m.mentionedJid[0] : null;
    } else {
      who = m.chat;
    }
    
    if (!who) throw texts.texto1;

    // Obtener el texto sin la menci√≥n
    const txt = text ? text.replace('@' + who.split`@`[0], '').trim() : '';
    if (!txt) throw texts.texto2;
    if (isNaN(txt)) throw texts.texto3;

    const expAmount = parseInt(txt);
    
    if (expAmount < 1) throw texts.texto4;

    // Obtener stats antes de a√±adir EXP para mostrar el nivel anterior
    const statsBefore = getUserStats(who);
    const levelBefore = statsBefore.level;

    // A√±adir experiencia usando la funci√≥n addExp del stats.js
    addExp(who, expAmount);

    // Obtener stats despu√©s para ver si subi√≥ de nivel
    const statsAfter = getUserStats(who);
    const levelAfter = statsAfter.level;
    const totalExp = getExp(who);

    // Crear mensaje de respuesta
    let responseMessage = `‚â° ${texts.texto5[0]}
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
‚ñ¢ ${texts.texto5[1]} ${expAmount}
‚ñ¢ ‚≠ê Total de EXP: ${totalExp}
‚ñ¢ üèÜ Nivel actual: ${levelAfter}`;

    // Si subi√≥ de nivel, mostrar informaci√≥n adicional
    if (levelAfter > levelBefore) {
      const levelsGained = levelAfter - levelBefore;
      responseMessage += `
‚ñ¢ üéâ ¬°Subi√≥ ${levelsGained} nivel${levelsGained > 1 ? 'es' : ''}!
‚ñ¢ üé≠ Nuevo rango: ${statsAfter.role}`;
    }

    responseMessage += `
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

    // Responder con confirmaci√≥n
    m.reply(responseMessage);

  } catch (error) {
    // Manejo de errores
    if (typeof error === 'string') {
      m.reply(error);
    } else {
      console.error('Error en owner-anadirExp:', error);
      m.reply('‚ùå Ocurri√≥ un error al procesar el comando');
    }
  }
};

handler.command = ['a√±adirexp', 'addexp', 'darexp', 'anadirexperiencia'];
handler.rowner = true; // Solo owners pueden usar este comando

export default handler;
